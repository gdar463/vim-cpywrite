After(Clear buffers);
  %bd!

Execute(Test that plugin was loaded);
  call vader#log('===== Pre-test environment check =====')
  Assert exists('g:loaded_cpywrite')

Execute(Turn on verbatim mode);
  call vader#log('===== Switching to verbatim license mode =====')
  let g:cpywrite#verbatim_mode = 1

Then(Assert that verbatim mode is now on);
  AssertEqual 1, g:cpywrite#verbatim_mode

" Tc #1
Execute(Prepend a license verbatim to a CSS file);
  new! verbatim.css
  b verbatim.css
  CPYwrite MIT

Then(CSS file header quotes the entire MIT license text);
  AssertEqual ' * verbatim.css', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * MIT License', getline(4)
  AssertEqual 2, len(getline(5)), 'Allow no trailing spaces'
  AssertEqual ' * Permission is hereby granted, free of charge, to any person obtaining a copy', getline(8)
  AssertEqual ' * The above copyright notice and this permission notice shall be included in', getline(15)
  AssertEqual ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR', getline(18)
  AssertEqual ' */', getline(24)

Execute(Turn off verbatim mode);
  call vader#log('===== Switching off verbatim mode =====')
  let g:cpywrite#verbatim_mode = 0

Then(Assert that verbatim mode is now off);
  AssertEqual 0, g:cpywrite#verbatim_mode

" Tc #2
Execute(Prepend a header-less license to a CSS file);
  new! brief.css
  b brief.css
  CPYwrite Beerware

Then(CSS file header has brief license mention);
  AssertEqual ' * brief.css', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * Distributed under the terms of the Beerware License.', getline(6)
  AssertEqual ' */', getline(7)

Execute(Set default license to MPL-2.0);
  call vader#log('===== Setting default license =====')
  let g:cpywrite#default_license = 'MPL-2.0'

Then(Assert that default license was set);
  AssertEqual 'MPL-2.0', g:cpywrite#default_license

" Tc #3
Execute(Prepend the default license header to a TypeScript file);
  new! standard.ts
  b standard.ts
  CPYwrite

Then(TypeScript file header quotes the MPL-2.0 license);
  AssertEqual ' * standard.ts', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * This Source Code Form is subject to the terms of the Mozilla Public License,', getline(6)
  AssertEqual ' */', getline(9)

" Tc #4
Execute(Prepend a header-less license to a TypeScript file);
  new! brief.ts
  b brief.ts
  CPYwrite Fair

Then(TypeScript file header has brief license mention);
  AssertEqual ' * brief.ts', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * Distributed under the terms of the Fair License.', getline(6)
  AssertEqual ' */', getline(7)

" Tc #5
Execute(Prepend a standard license header to an HTML5 file);
  new! standard.htm
  b standard.htm
  call setline(1, '<!DOCTYPE html>')
  CPYwrite GFDL-1.1-or-later

Then(HTML comment block quotes the GFDL-1.1-or-later);
  AssertEqual '<!DOCTYPE html>', getline(1), 'Preserve doctype declaration'
  AssertEqual ' standard.htm', getline(3)
  AssertEqual 0, len(getline(4)), 'Allow no trailing spaces'
  AssertEqual ' GNU Free Documentation License, Version 1.1 or any later version', getline(7)
  AssertEqual '-->', getline(12)

" Tc #6
Execute(Prepend a header-less license to Markdown);
  new! brief.md
  b brief.md
  CPYwrite Xerox

Then(Markdown comment heading has brief license mention);
  AssertEqual ' brief.md', getline(2)
  AssertEqual 0, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' Distributed under the terms of the Xerox License.', getline(6)
  AssertEqual '-->', getline(7)

" Tc #7
Execute(Prepend a standard license header to a SASS file);
  new! standard.scss
  b standard.scss
  CPYwrite BitTorrent-1.0

Then(SASS file header quotes the BitTorrent-1.0 license);
  AssertEqual '// standard.scss', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '// The contents of this file are subject to the BitTorrent Open Source License', getline(6)
  AssertEqual '//', getline(14)

" Tc #8
Execute(Prepend a header-less license to a SASS file);
  new! brief.scss
  b brief.scss
  CPYwrite Afmparse

Then(SASS file header has brief license mention);
  AssertEqual '// brief.scss', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '// Distributed under the terms of the Afmparse License.', getline(6)
  AssertEqual '//', getline(7)

" Tc #9
Execute(Prepend a standard license header to an Elm file);
  new! standard.elm
  b standard.elm
  CPYwrite BitTorrent-1.1

Then(Elm file header quotes the BitTorrent-1.1);
  AssertEqual ' standard.elm', getline(2)
  AssertEqual ' Version 1.1 (the License). You may not copy or use this file, in either', getline(7)
  AssertEqual ' may obtain a copy of the License at http://www.bittorrent.com/license/.', getline(9)
  AssertEqual 2, len(getline(14)), 'Allow no trailing spaces'

Execute(Use :CPYwriteToggleMode to switch on verbatim mode);
  call vader#log('===== Calling :CPYwriteToggleMode =====')
  CPYwriteToggleMode

Then(Assert that verbatim mode is now on);
  AssertEqual 1, g:cpywrite#verbatim_mode

" Tc #10
Execute(Prepend a license verbatim to a CoffeeScript file);
  new! verbatim.coffee
  b verbatim.coffee
  CPYwrite BSD-1-Clause

Then(CoffeeScript file quotes the entire BSD 1-Clause);
  AssertEqual '###', getline(1), 'Use proper multiline comment syntax'
  AssertEqual ' verbatim.coffee', getline(2)
  AssertEqual ' 1. Redistributions of source code must retain the above copyright notice,', getline(9)
  AssertEqual ' THIS SOFTWARE IS PROVIDED BY Berkeley Software Design, Inc. "AS IS" AND ANY', getline(12)
  AssertEqual '###', getline(22), 'Use proper multiline comment syntax'

Execute(Use :CPYwriteToggleMode to switch off verbatim mode);
  call vader#log('===== Calling :CPYwriteToggleMode =====')
  CPYwriteToggleMode

Then(Assert that verbatim mode is now off);
  AssertEqual 0, g:cpywrite#verbatim_mode

Execute(Prepend a standard license header to a PureScript file);
  new! gplv2.purs
  b gplv2.purs
  CPYwrite GPL-2.0-or-later

Then(PureScript file header quotes the GPLv2+);
  AssertEqual '-- gplv2.purs', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '-- modify it under the terms of the GNU General Public License', getline(7)
  AssertEqual '-- 2 of the License, or (at your option) any later version.', getline(9)
  AssertEqual '--', getline(19)

Execute(Hide buffer name from license header);
  call vader#log('===== Calling :CPYwriteToggleFilename =====')
  CPYwriteToggleFilename

Then(Assert that :CPYwriteToggleFilename turns on file name hiding);
  AssertEqual 1, g:cpywrite#hide_filename

Execute(Prepend a brief license mention to a ReasonML file);
  new! brief.rei
  b brief.rei
  CPYwrite Artistic-2.0

Then(ReasonML file identifies the Artistic-2.0);
  AssertEqual '/**', getline(1)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * Distributed under the terms of the Artistic License Version 2.0.', getline(4)
  AssertEqual ' */', getline(5)

Execute(Resume showing file name);
  call vader#log('===== Calling :CPYwriteToggleFilename =====')
  CPYwriteToggleFilename

Then(Assert that file name is now showing);
  AssertEqual 0, g:cpywrite#hide_filename
