After(Clear buffers);
  %bd!

Execute(Test that plugin was loaded);
  call vader#log('===== Pre-test environment check =====')
  Assert exists('g:loaded_cpywrite')

Execute(Use :CPYwriteDefaultLicense to set default license);
  call vader#log('===== Calling :CPYwriteDefaultLicense =====')
  CPYwriteDefaultLicense BSD-2-Clause

Then(Assert that :CPYwriteDefaultLicense changes default license);
  AssertEqual 'BSD-2-Clause', g:cpywrite#default_license

Execute(Use :CPYwriteToggleMode to switch on verbatim mode);
  call vader#log('===== Callng :CPYwriteToggleMode =====')
  CPYwriteToggleMode

Then(Assert that verbatim mode is now on);
  AssertEqual 1, g:cpywrite#verbatim_mode

" Tc #1
Execute(Prepend a license verbatim to a Scheme file);
  new! verbatim.ss
  b verbatim.ss
  silent exe "norm \<Plug>(cpywrite)"

Then(Scheme file header quotes the entire BSD-2-Clause license);
  AssertEqual ';; verbatim.ss', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ';; 1. Redistributions of source code must retain the above copyright notice,', getline(9)
  AssertEqual ';; 2. Redistributions in binary form must reproduce the above copyright notice,', getline(12)
  AssertEqual ';; USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.', getline(25)
  AssertEqual 2, len(getline(26)), 'Allow no trailing spaces'

" Tc #2
Execute(Prepend a license verbatim to an F-sharp file);
  new! verbatim.fsi
  b verbatim.fsi
  CPYwrite 0BSD

Then(F-sharp file quotes the entire BSD 0-Clause license);
  AssertEqual '// verbatim.fsi', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '// Permission to use, copy, modify, and/or distribute this software for any purpose', getline(6)
  AssertEqual '// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH', getline(9)
  AssertEqual 2, len(getline(16)), 'Allow no trailing spaces'

Execute(Use :CPYwriteToggleMode to switch off verbatim mode);
  call vader#log('===== Calling :CPYwriteToggleMode =====')
  CPYwriteToggleMode

Then(Assert that :CPYwriteToggleMode changes verbatim mode setting);
  AssertEqual 0, g:cpywrite#verbatim_mode

Execute(Use :CPYwriteDefaultLicense to set default license);
  call vader#log('===== Calling :CPYwriteDefaultLicense =====')
  CPYwriteDefaultLicense GFDL-1.2-or-later

Then(Assert that :CPYwriteDefaultLicense changes default license);
  AssertEqual 'GFDL-1.2-or-later', g:cpywrite#default_license

" Tc #3
Execute(Prepend the default license header to a Common Lisp file);
  new! standard.cl
  b standard.cl
  norm LH

Then(Common Lisp file header quotes the GFDL-1.2-or-later);
  AssertEqual ';; standard.cl', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ';; distribute and/or modify this document under the terms of the GNU', getline(5)
  AssertEqual ';; Free Documentation License, Version 1.2 or any later version published', getline(6)

" Tc #4
Execute(Prepend a header-less license to a Lisp file);
  new! brief.lsp
  b brief.lsp
  CPYwrite MIT-Modern-Variant

Then(Lisp file header has brief license mention);
  AssertEqual ';; brief.lsp', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ';; Distributed under the terms of the MIT License Modern Variant.', getline(6)
  AssertEqual 2, len(getline(7)), 'Allow no trailing spaces'

" Tc #5
Execute(Prepend a standard license header to a Clojure file);
  new! standard.clj
  b standard.clj
  CPYwrite ECL-2.0

Then(Clojure file header quotes the ECL-2.0);
  AssertEqual ';; standard.clj', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ';; Educational Community License, Version 2.0 (the "License"); you may', getline(5)
  AssertEqual 2, len(getline(16)), 'Allow no trailing spaces'

" Tc #6
Execute(Prepend a standard license header to a ClojureScript file);
  new! standard.cljs
  b standard.cljs
  CPYwrite GPL-3.0-only

Then(ClojureScript file header quotes the GPL-3.0-only);
  AssertEqual ';; standard.cljs', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ';; as published by the Free Software Foundation, version 3.', getline(8)
  AssertEqual 2, len(getline(18)), 'Allow no trailing spaces'

" Tc #7
Execute(Prepend a standard license header to an OCaml file);
  new! standard.ml
  b standard.ml
  CPYwrite GFDL-1.3-or-later

Then(OCaml file header quotes the GFDL-1.3-or-later);
  AssertEqual ' standard.ml', getline(2)
  AssertEqual 0, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' distribute and/or modify this document under the terms of the GNU', getline(5)
  AssertEqual ' Free Documentation License, Version 1.3 or any later version published', getline(6)
  AssertEqual '*)', getline(11)

" Tc #8
Execute(Prepend a header-less license to an OCaml file);
  new! brief.mli
  b brief.mli
  CPYwrite DOC

Then(OCaml file header has brief license mention);
  AssertEqual ' brief.mli', getline(2)
  AssertEqual 0, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' Distributed under the terms of the DOC License.', getline(6)
  AssertEqual 2, len(getline(7)), 'Allow no trailing spaces'

" Tc #9
Execute(Prepend a standard license header to a Haskell file);
  new! standard.hs
  b standard.hs
  CPYwrite AFL-2.1

Then(Haskell file header quotes the AFL-2.1);
  AssertEqual '-- standard.hs', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '-- Licensed under the Academic Free License version 2.1', getline(6)
  AssertEqual '--', getline(7)

" Tc #10
Execute(Prepend a header-less license to a Haskell file);
  new! brief.lhs
  b brief.lhs
  CPYwrite Eurosym

Then(Haskell file header has brief license mention);
  AssertEqual '-- brief.lhs', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '-- Distributed under the terms of the Eurosym License.', getline(6)
  AssertEqual 2, len(getline(7)), 'Allow no trailing spaces'

Execute(Use :CPYwriteDefaultLicense to set default license);
  call vader#log('===== Calling :CPYwriteDefaultLicense =====')
  CPYwriteDefaultLicense ECL-1.0

Then(Assert that :CPYwriteDefaultLicense changes default license);
  AssertEqual 'ECL-1.0', g:cpywrite#default_license

" Tc #11
Execute(Prepend standard header to an Erlang file);
  new! standard.erl
  b standard.erl
  silent exe "norm \<Plug>(cpywrite)"

Then(Erlang file header quotes the ECL-1.0);
  AssertEqual '%% standard.erl', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '%% Licensed under the Educational Community License version 1.0', getline(6)
  AssertEqual 2, len(getline(7)), 'Allow no trailing spaces'

Execute(Use :CPYwriteToggleMode to switch on verbatim mode);
  call vader#log('===== Calling :CPYwriteToggleMode =====')
  CPYwriteToggleMode

Then(Assert that verbatim mode is now on);
  AssertEqual 1, g:cpywrite#verbatim_mode

" Tc #12
Execute(Prepend a license verbatim to an Elixir file);
  new! verbatim.ex
  b verbatim.ex
  norm LH

Then(Elixir file quotes the entire ECL-1.0);
  AssertEqual '# verbatim.ex', getline(2)
  AssertEqual 1, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '# The Educational Community License', getline(4)
  AssertEqual '# The full text of the Educational Community License in a location viewable',getline(28)
  AssertEqual '# The name and trademarks of copyright holder(s) may NOT be used in advertising', getline(47)
  AssertEqual 1, len(getline(51)), 'Allow no trailing spaces'

Execute(Use :CPYwriteToggleMode to switch off verbatim mode);
  call vader#log('===== Calling :CPYwriteToggleMode =====')
  CPYwriteToggleMode

Then(Assert that verbatim mode is now off);
  AssertEqual 0, g:cpywrite#verbatim_mode

Execute(Prepend a standard license header to an Eiffel file);
  new! brief.e
  b brief.e
  CPYwrite EUDatagrid

Then(Eiffel file header mentions the EUDatagrid);
  AssertEqual '-- brief.e', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '-- Distributed under the terms of the EU DataGrid Software License.', getline(6)
  AssertEqual '--', getline(7)
