After(Clear buffers);
  %bd!

Execute(Test that plugin was loaded);
  call vader#log('===== Pre-test environment check =====')
  Assert exists('g:loaded_cpywrite')

Execute(Set default license to Apache-2.0);
  call vader#log('===== Setting default license =====')
  let g:cpywrite#default_license = 'Apache-2.0'

Then(Assert that default license was set);
  AssertEqual 'Apache-2.0', g:cpywrite#default_license

Execute(Prepend a standard license header to a C header file);
  new! standard.H
  b standard.H
  norm LH

Then(C header quotes the Apache-2.0 license);
  AssertEqual ' * standard.h', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * Licensed under the Apache License, Version 2.0 (the "License");', getline(6)
  AssertEqual ' *     http://www.apache.org/licenses/LICENSE-2.0', getline(10)

Execute(Use :CPYwriteDefaultLicense to set default license);
  call vader#log('===== Calling :CPYwriteDefaultLicense =====')
  CPYwriteDefaultLicense LGPL-3.0-or-later

Then(Assert that :CPYwriteDefaultLicense changes default license);
  AssertEqual 'LGPL-3.0-or-later', g:cpywrite#default_license

Execute(Prepend a header-less license to a C source file);
  new! brief.c
  b brief.c
  norm LH

Then(C header has brief license mention);
  AssertEqual ' * brief.c', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * Distributed under the terms of the GNU Lesser General Public License Version 3.0 or later.', getline(6)
  AssertEqual ' */', getline(7)

Execute(Prepend a standard license header to a C++ header file);
  new! standard.hpp
  b standard.hpp
  CPYwrite BitTorrent-1.1

Then(C++ source file quotes the BitTorrent-1.1 license);
  AssertEqual ' * standard.hpp', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * The contents of this file are subject to the BitTorrent Open Source License', getline(6)
  AssertEqual ' */', getline(14)

Execute(Prepend a header-less license to a C++ source file);
  new! brief.cxx
  b brief.cxx
  CPYwrite OpenSSL

Then(C++ source file has brief license mention);
  AssertEqual ' * brief.cxx', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * Distributed under the terms of the OpenSSL License.', getline(6)
  AssertEqual ' */', getline(7)

Execute(Prepend a standard header to CMakeLists.txt);
  new! CMakeLists.txt
  b CMakeLists.txt
  CPYwrite GPL-3.0-only

Then(CMakeLists.txt quotes GPLv3);
  AssertEqual '# CMakeLists.txt', getline(2)
  AssertEqual 1, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '# as published by the Free Software Foundation, version 3.', getline(8)
  AssertEqual 1, len(getline(18)), 'Allow no trailing spaces'

Execute(Turn on verbatim mode);
  call vader#log('===== Switching to verbatim license mode =====')
  let g:cpywrite#verbatim_mode = 1

Then(Assert that verbatim mode is now on);
  AssertEqual 1, g:cpywrite#verbatim_mode

Execute(Prepend a public domain license verbatim to an Objective-C file);
  new! freed.m
  b freed.m
  CPYwrite Unlicense

Then(Objective-C  file header quotes the entire Unlicense);
  AssertEqual ' * freed.m', getline(2)
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * This is free and unencumbered software released into the public domain.', getline(4)
  AssertEqual ' * Anyone is free to copy, modify, publish, use, compile, sell, or distribute', getline(6)
  AssertEqual ' * In jurisdictions that recognize copyright laws, the author or authors of this', getline(10)
  AssertEqual ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR', getline(17)
  AssertEqual ' */', getline(24)

Execute(Hide buffer name from license header);
  call vader#log('===== Calling :CPYwriteToggleFilename =====')
  CPYwriteToggleFilename

Then(Assert that :CPYwriteToggleFilename turns on file name hiding);
  AssertEqual 1, g:cpywrite#hide_filename

Execute(Prepend a license verbatim to a Rust file);
  new! verbatim.rs
  b verbatim.rs
  CPYwrite BSD-3-Clause

Then(Rust file header quotes the entire BSD-3-Clause license);
  AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '// 1. Redistributions of source code must retain the above copyright notice,', getline(7)
  AssertEqual '// 2. Redistributions in binary form must reproduce the above copyright notice,', getline(10)
  AssertEqual '// 3. Neither the name of the copyright holder nor the names of its contributors', getline(14)
  AssertEqual '// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"', getline(18)
  AssertEqual 2, len(getline(28)), 'Allow no trailing spaces'

Execute(Use :CPYwriteToggleMode to switch off verbatim mode);
  call vader#log('===== Calling :CPYwriteToggleMode =====')
  CPYwriteToggleMode

Then(Assert that :CPYwriteToggleMode changes verbatim mode setting);
  AssertEqual 0, g:cpywrite#verbatim_mode

Execute(Use :CPYwriteToggleFilename to start showing buffer name);
  call vader#log('===== Restoring file name display =====')
  CPYwriteToggleFilename

Then(Assert that file name is now showing);
  AssertEqual 0, g:cpywrite#hide_filename
