After(Clear buffers);
  %bd!

Execute(Test that plugin was loaded);
  call vader#log('===== Pre-test environment check =====')
  Assert exists('g:loaded_cpywrite')

Execute(Set default license to Apache-2.0);
  call vader#log('===== Setting default license =====')
  let g:cpywrite_default_license = 'Apache-2.0'

Then(Assert that default license was set);
  AssertEqual 'Apache-2.0', g:cpywrite_default_license

Execute(Prepend a standard license header to a C header file);
  new! standard.H
	b standard.H
	norm LH

Then(C header quotes the Apache-2.0 license);
  AssertEqual ' * standard.h', getline(2)
	AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * Licensed under the Apache License, Version 2.0 (the "License");', getline(6)
  AssertEqual ' *     http://www.apache.org/licenses/LICENSE-2.0', getline(10)

Execute(Prepend a header-less license to a C source file);
  new! brief.c
	b brief.c
  CPYwrite LGPL-3.0-or-later

Then(C header has brief license mention);
  AssertEqual ' * brief.c', getline(2)
	AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * Licensed under the terms of the LGPL-3.0-or-later license', getline(6)
  AssertEqual ' */', getline(7)

Execute(Prepend a standard license header to a C++ header file);
  new! standard.hpp
	b standard.hpp
	CPYwrite BitTorrent-1.1

Then(C++ source file quotes the BitTorrent-1.1 license);
  AssertEqual ' * standard.hpp', getline(2)
	AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * The contents of this file are subject to the BitTorrent Open Source License Version 1.1 (the', getline(6)
  AssertEqual ' */', getline(13)

Execute(Prepend a header-less license to a C++ source file);
  new! brief.cxx
	b brief.cxx
  CPYwrite OpenSSL

Then(C++ source file has brief license mention);
  AssertEqual ' * brief.cxx', getline(2)
	AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual ' * Licensed under the terms of the OpenSSL license', getline(6)
  AssertEqual ' */', getline(7)

Execute(Turn on verbatim mode);
  call vader#log('===== Switching to verbatim license mode =====')
  let g:cpywrite_verbatim_mode = 1

Then(Assert that verbatim mode is now on);
  AssertEqual 1, g:cpywrite_verbatim_mode

" Tc #5
Execute(Prepend a license verbatim to a Rust file);
  new! verbatim.rs
	b verbatim.rs
  CPYwrite BSD-3-Clause

Then(Rust file header quotes the entire BSD-3-Clause license);
  AssertEqual '// verbatim.rs', getline(2)
	AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '// 1. Redistributions of source code must retain the above copyright notice,', getline(9)
  AssertEqual '// 2. Redistributions in binary form must reproduce the above copyright notice,', getline(12)
  AssertEqual '// 3. Neither the name of the copyright holder nor the names of its contributors', getline(16)
  AssertEqual '// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"', getline(20)
  AssertEqual 2, len(getline(30)), 'Allow no trailing spaces'

Execute(Prepend a license verbatim to a Go file);
  new! verbatim.go
	b verbatim.go
  CPYwrite BSD-1-Clause

Then(Go file header quotes the entire BSD-1-Clause license);
  AssertEqual '// verbatim.go', getline(2)
	AssertEqual 2, len(getline(3)), 'Allow no trailing spaces'
  AssertEqual '// 1. Redistributions of source code must retain the above copyright notice,', getline(9)
  AssertEqual '// THIS SOFTWARE IS PROVIDED BY Berkeley Software Design, Inc. "AS IS" AND ANY', getline(12)
	AssertEqual '// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.', getline(21)
  AssertEqual 2, len(getline(22)), 'Allow no trailing spaces'

Execute(Turn off verbatim mode);
  call vader#log('===== Switching off verbatim mode =====')
  let g:cpywrite_verbatim_mode = 0

Then(Assert that verbatim mode is now off);
  AssertEqual 0, g:cpywrite_verbatim_mode
